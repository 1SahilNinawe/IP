Theory for Viva:
A portfolio is a personal website or page designed to showcase an individual's skills, experiences, projects, and qualifications. It is primarily used by professionals, freelancers, and students to present their work to potential employers, clients, or academic institutions. In web development, creating a portfolio with HTML5 is a fundamental exercise, utilizing a variety of HTML elements and attributes to structure and style the page.

The key elements of a student portfolio include:

Hero Section: The first section users see, often including an introduction and a call-to-action, such as “Contact Me” or “View Projects.”
About Me Section: Provides a brief description of the individual, covering education, interests, work experience, and skills.
Projects Section: Lists notable projects in chronological or logical order. This section can include details such as the technologies used, personal contributions, and images of the projects.
Contact Section: Contains contact information, including email, social media links (LinkedIn, GitHub), and other communication channels.
HTML5 elements such as <div>, <header>, <footer>, <img>, <table>, and <a> are used to organize content and create a visually appealing and functional webpage. The <div> tag helps structure the page into different sections, while the <img> tag adds images. The anchor tag <a> is used for hyperlinks, and the <header> and <footer> tags define the top and bottom sections of the page, respectively.

In addition, lists (<ul>, <li>) are employed to organize items, and the use of tables (<table>, <tr>, <td>) enables content to be displayed in rows and columns. Styling and responsive behavior can be enhanced through external CSS.

Conclusion for Viva:
In conclusion, creating a student portfolio webpage using HTML5 is a valuable exercise in web development that demonstrates the effective use of semantic HTML elements. A well-structured portfolio not only highlights the individual’s skills, experiences, and projects but also provides an opportunity to make a lasting impression on potential employers or academic evaluators. By using HTML5 elements such as <div>, <header>, <footer>, <img>, and <a>, along with lists, tables, and forms, we can organize content in a clear and accessible way. Additionally, incorporating CSS enhances the design, ensuring the webpage is both visually appealing and responsive across devices.

---------------------------------------------------------------------------------------

In this experiment, we studied and implemented HTML5 form controls to create a placement registration form. HTML forms allow user inputs to be captured and sent to a server for processing. We used various HTML5 elements such as:

Text Input (<input type="text">): Used to capture user input like name, roll number, etc.
Password Field (<input type="password">): Used to capture sensitive information like passwords.
Email Field (<input type="email">): Ensures a valid email format is entered by the user.
Radio Buttons (<input type="radio">): Allows selection of one option from a group of predefined choices.
Checkboxes (<input type="checkbox">): Used to select multiple options, if needed.
Drop-down List (<select>): Provides a list of choices where only one option can be selected.
Submit Button (<input type="submit">): Triggers form submission.
These controls were wrapped inside the <form> tag and organized using <fieldset> and <legend> for a better user experience. Each element has attributes like name, id, and value, which ensure correct data transmission to the server. The correct input validation, such as for emails and passwords, was achieved using HTML5 features.

Conclusion for Viva:
In this experiment, we learned how to design and implement a fully functional placement registration form using HTML5 elements. We explored various form controls like text boxes, password fields, email fields, radio buttons, checkboxes, and dropdown lists, and understood their roles in capturing user data. We also implemented form validation, ensuring inputs like email are in a valid format. By using <fieldset> and <legend>, we grouped related form controls, improving the structure and clarity of the form.
